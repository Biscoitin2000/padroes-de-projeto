O padrão Factory é um padrão criacional que fornece uma interface para criar objetos em uma classe-mãe, permitindo que as subclasses alterem o tipo de objetos criados.

             Problema que Resolve:
Facilita a criação de objetos complexos sem expor a lógica de instanciamento ao cliente, promovendo flexibilidade no código.

             Quando Usar:
- Quando o código precisa criar objetos sem saber exatamente qual classe será instanciada até o momento da execução.
- Para evitar o uso de código com `new` espalhado por várias partes do programa.

             Vantagens:
--> Facilita a reutilização de código, já que o cliente não precisa conhecer os detalhes das classes concretas.
--> Permite adicionar novos produtos facilmente sem modificar o código existente.
Desvantagens:
--> Pode aumentar a complexidade inicial do código ao introduzir várias classes.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        PYTHO

from abc import ABC, abstractmethod

# Produto abstrato
class Product(ABC):
    @abstractmethod
    def operation(self):
        pass

# Produto concreto
class ConcreteProductA(Product):
    def operation(self):
        return "Produto A criado."

class ConcreteProductB(Product):
    def operation(self):
        return "Produto B criado."

# Criador abstrato
class Creator(ABC):
    @abstractmethod
    def factory_method(self):
        pass

    def some_operation(self):
        # Uso do produto criado
        product = self.factory_method()
        return f"Criador: {product.operation()}"

# Criadores concretos
class ConcreteCreatorA(Creator):
    def factory_method(self):
        return ConcreteProductA()

class ConcreteCreatorB(Creator):
    def factory_method(self):
        return ConcreteProductB()

# Testando o padrão Factory
if __name__ == "__main__":
    creator_a = ConcreteCreatorA()
    print(creator_a.some_operation())
    creator_b = ConcreteCreatorB()
    print(creator_b.some_operation())
